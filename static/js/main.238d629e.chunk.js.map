{"version":3,"sources":["logo.svg","firebase/init.js","component/btn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","messaging","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","usePublicVapidKey","Btn","handleClick","console","log","sendTokenToServer","token","setTokenSentToServer","receivedMessage","payload","data","notification","that","this","requestPermission","then","a","getToken","currentToken","catch","err","navigator","serviceWorker","addEventListener","message","onMessage","className","onClick","React","Component","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","register","registration","scope","ReactDOM","render","StrictMode","document","getElementById","ready","unregister","error"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,yPCcrCC,G,MADyBC,gBAVV,CACjBC,OAAQ,0CACRC,WAAY,0BACZC,YAAa,iCACbC,UAAW,UACXC,cAAe,sBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGsBT,aAEzCA,EAAUU,kBAAkB,2F,ICbPC,E,4MAMnBC,YAAc,WACZC,QAAQC,IAAI,U,EAyBdC,kBAAoB,SAACC,GACnBH,QAAQC,IAAI,KAAME,I,EAGpBC,qBAAuB,SAACD,GAEtB,OADAH,QAAQC,IAAI,KAAM,UACX,G,EAGTI,gBAAkB,SAACC,GACjBN,QAAQC,IAAI,SAAUK,EAAQC,MAC9BP,QAAQC,IAAI,SAAUK,EAAQE,e,kLAhC1BC,EAAOC,KACTvB,EAAUwB,oBACPC,KADH,sBACQ,sBAAAC,EAAA,sDACE1B,EAAU2B,WAAWF,MAAK,SAACG,GACvBN,EAAKP,kBAAkBa,MACxBC,OAAM,SAACC,GACRjB,QAAQC,IAAI,6CAA8CgB,GAC1DjB,QAAQC,IAAI,uCAAwCgB,GACpDR,EAAKL,sBAAqB,MAN9B,4CASLY,OAAM,SAASC,GACdjB,QAAQC,IAAI,sCAAuCgB,MAEvDC,UAAUC,cAAcC,iBAAiB,WAAW,SAACC,OAIrDlC,EAAUmC,WAAU,SAAChB,GAAD,OAAaG,EAAKJ,gBAAgBC,M,qIAiBxD,OACE,6BACI,4BAAQiB,UAAU,iBAAiBC,QAASd,KAAKX,aAAjD,6B,GAhDuB0B,IAAMC,WCyBxBC,MAtBf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEP,UAAU,WACVQ,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,kBAAC,EAAD,SCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZF,kBAAmBpB,WACrBA,UAAUC,cACPoB,SAAS,8BACT3B,MAAK,SAAS4B,GACbxC,QAAQC,IAAI,qCAAsCuC,EAAaC,OAC/DzC,QAAQC,IAAIuC,MAEbxB,OAAM,SAASC,GACdjB,QAAQC,IAAI,6CAA8CgB,MAIhEyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmB5B,WACrBA,UAAUC,cAAc4B,MACrBnC,MAAK,SAAA4B,GACJA,EAAaQ,gBAEdhC,OAAM,SAAAiC,GACLjD,QAAQiD,MAAMA,EAAM5B,c","file":"static/js/main.238d629e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import * as firebase from \"firebase/app\";\r\nimport \"firebase/messaging\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDvdQzQokGNEwS_OYMSNKbZp1lzOCivm9A\",\r\n    authDomain: \"apd-tts.firebaseapp.com\",\r\n    databaseURL: \"https://apd-tts.firebaseio.com\",\r\n    projectId: \"apd-tts\",\r\n    storageBucket: \"apd-tts.appspot.com\",\r\n    messagingSenderId: \"713127444861\",\r\n    appId: \"1:713127444861:web:b86d2d41e2a5d336e5cc14\",\r\n    measurementId: \"G-HE5VWR73TX\"\r\n  };\r\nconst initializedFirebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst messaging = initializedFirebaseApp.messaging();\r\n\r\nmessaging.usePublicVapidKey(\"BAWf0uwbIbXttAI4mXq5YZjqX7tlkWN7bDkfxYM7wRYp_KcN_jtMzybVerVu_31drVA30ZKBywjjtN15WBhqgiM\");\r\nexport { messaging };\r\n","import React from 'react';\r\nimport { messaging } from \"../firebase/init\";\r\n\r\nexport default class Btn extends React.Component {\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n\r\n  handleClick = () => {\r\n    console.log('click')\r\n  }\r\n\r\n  async componentDidMount() {\r\n    var that = this;\r\n      messaging.requestPermission()\r\n        .then(async function() {\r\n                messaging.getToken().then((currentToken) => {\r\n                    that.sendTokenToServer(currentToken);\r\n                }).catch((err) => {\r\n                  console.log('An error occurred while retrieving token. ', err);\r\n                  console.log('Error retrieving Instance ID token. ', err);\r\n                  that.setTokenSentToServer(false);\r\n                });;\r\n        })\r\n        .catch(function(err) {\r\n          console.log(\"Unable to get permission to notify.\", err);\r\n        });\r\n      navigator.serviceWorker.addEventListener(\"message\", (message) => {\r\n        \r\n      });\r\n\r\n      messaging.onMessage((payload) => that.receivedMessage(payload));\r\n    }\r\n\r\n  sendTokenToServer = (token) => {\r\n    console.log(1111, token);\r\n  }\r\n\r\n  setTokenSentToServer = (token) => {\r\n    console.log(2222, 'ERROR');\r\n    return false;\r\n  }\r\n\r\n  receivedMessage = (payload) => {\r\n    console.log('data: ', payload.data);\r\n    console.log('noti: ', payload.notification);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n          <button className=\"js-push-button\" onClick={this.handleClick}>\r\n            Enable Push Messages\r\n          </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n// import messaging from './firebase/init.js';\r\nimport Btn from './component/btn.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <Btn />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nif (\"serviceWorker\" in navigator) {\r\n  navigator.serviceWorker\r\n    .register(\"./firebase-messaging-sw.js\")\r\n    .then(function(registration) {\r\n      console.log(\"Registration successful, scope is:\", registration.scope);\r\n      console.log(registration)\r\n    })\r\n    .catch(function(err) {\r\n      console.log(\"Service worker registration failed, error:\", err);\r\n    });\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}